%% Find time setting
% This function is used to decide how long each plan should last, depending on
% when in time hot spots occur. 

% Input: - plan_index, the index of the plan that is used for the .h5 file.
%           If P1 and P2 are used then p_index is 1 or 2 for example. 
%        - Model type
%        - Number of temperature files from CompletePennes (i.e number of time steps taken during the iteration for each P)
%        - Tissue matrix
%        - Tmax in healthy tissue 
%        - Recommended_time (i.e an estimate of how many minutes it should take to heat the specific tumor)

% The temperature files should be saved in ../Treatment_plan/MAIN/Scripts/FEniCS_results and be named according to
% the description in CompletePennes.

% Output: time_duration is the time in minutes that is recommended for the
% time duration of the provided plan given the recommended_time 


function [time_setting]=  find_time_setting(plan_index, modelType, nbr_temp_files, tissue_mat, Tmax_healthy, recommended_time)

filename = which('evaluate_temp');
[temperaturepath,~,~] = fileparts(filename);
datapath = [temperaturepath filesep '..' filesep '..' filesep 'Data'];
scriptpath = [temperaturepath filesep '..'];
%resultpath = [temperaturepath filesep '..' filesep '..' filesep 'Results' filesep 'time_setting'];

addpath(scriptpath)

tissue_mat = Extrapolation.load([datapath filesep 'tissue_mat_' modelType '.mat']);
[a,b,c] = size(tissue_mat);

% Define vector with 0 when there is no hotspot and 1 when there is a
% hot spot present
hotspot= zeros(nbr_temp_files,1)

% Define tumor index for model
if startsWith(modelType, 'duke')
    tumor_ind=80;
elseif startsWith(modeltype,'child')
    tumor_ind=9;
else
    error('Modeltype not defined')
end

for i =1: nbr_temp_files
    % Read each temperature file generated by CompletePennes
    temppath = [temperaturepath filesep '..' filesep '..' filesep 'Results' filesep 'FEniCS_results' filesep modelType ...
        filesep 'temperature_'+ str(p_index) + str(i) +'.h5'];
    temp_mat(:,:,:,i) = read_temperature(temppath,1,1,1,a,b,c);
    
    % Exclude tumor from matrix
    temp_vec=temp_mat(:);
    healthy_index=find(temp_vec~=tumor_ind); 
    healthy_vec(:,i)=temp_vec(healthy_index);
end

% Define hot spot where the temperature is higher than Tmax_healthy
for i=1:nbr_temp_files
    if max(healthy_vec(i))>= Tmax_healthy
        hotspot(i)=1;
    end
end

% Find in which time step the first hot spot occures
first_hotspot=min(find(hotspot==1));

% Estimate when the hot spot occured given the recommended_time
time_setting=(first_hotspot/recommended_time)*recommended_time;
end

